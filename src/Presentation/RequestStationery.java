/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentation;

import BusinessLogic.Category;
import BusinessLogic.CustomException;
import BusinessLogic.Request;
import BusinessLogic.RequestDetail;
import BusinessLogic.Staff;
import BusinessLogic.Stationery;
import BusinessLogic.StationeryCodeSort;
import BusinessLogic.StationeryDescriptionSort;
import BusinessLogic.StationeryStockSort;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nicky
 */
public class RequestStationery extends javax.swing.JFrame
{

    /**
     * Creates new form OrderStocks
     */
    public RequestStationery()
    {
        initComponents();
        this.setLocationRelativeTo(null);

        selectedStationeries = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel10 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnRemoveItem = new javax.swing.JButton();
        btnClearItems = new javax.swing.JButton();
        btnRequestItems = new javax.swing.JButton();
        txtSearchDescription = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnAddItem = new javax.swing.JButton();
        cmbSort = new javax.swing.JComboBox<>();
        cmbSearchCategory = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRequestDetails = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStationery = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(650, 500));
        setSize(new java.awt.Dimension(650, 500));
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowActivated(java.awt.event.WindowEvent evt)
            {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel10.setText("REQUEST STATIONERY");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(240, 20, 270, 29);

        btnBack.setText("BACK");
        btnBack.setName("btnBack"); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack);
        btnBack.setBounds(530, 20, 90, 30);

        btnRemoveItem.setActionCommand("REMOVE ITEM");
        btnRemoveItem.setLabel("REMOVE ITEM");
        btnRemoveItem.setName("btnRemoveItem"); // NOI18N
        btnRemoveItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnRemoveItemActionPerformed(evt);
            }
        });
        getContentPane().add(btnRemoveItem);
        btnRemoveItem.setBounds(180, 410, 130, 35);

        btnClearItems.setLabel("CLEAR ITEMS");
        btnClearItems.setName("btnClearItems"); // NOI18N
        btnClearItems.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnClearItemsActionPerformed(evt);
            }
        });
        getContentPane().add(btnClearItems);
        btnClearItems.setBounds(20, 410, 130, 35);

        btnRequestItems.setText("REQUEST ITEMS");
        btnRequestItems.setActionCommand("PLACE ORDER");
        btnRequestItems.setName("btnRequestItems"); // NOI18N
        btnRequestItems.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnRequestItemsActionPerformed(evt);
            }
        });
        getContentPane().add(btnRequestItems);
        btnRequestItems.setBounds(470, 410, 150, 35);

        txtSearchDescription.setName("txtSearchDescription"); // NOI18N
        getContentPane().add(txtSearchDescription);
        txtSearchDescription.setBounds(20, 100, 140, 20);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("DESCRIPTION");
        jLabel5.setName(""); // NOI18N
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 70, 120, 30);

        btnAddItem.setLabel("ADD ITEM");
        btnAddItem.setName("btnAddItem"); // NOI18N
        btnAddItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAddItemActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddItem);
        btnAddItem.setBounds(530, 70, 90, 50);

        cmbSort.setName("cmbSort"); // NOI18N
        cmbSort.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbSortActionPerformed(evt);
            }
        });
        getContentPane().add(cmbSort);
        cmbSort.setBounds(370, 70, 130, 20);

        cmbSearchCategory.setName("cmbSearchCategory"); // NOI18N
        cmbSearchCategory.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbSearchCategoryActionPerformed(evt);
            }
        });
        getContentPane().add(cmbSearchCategory);
        cmbSearchCategory.setBounds(370, 100, 130, 20);

        jLabel3.setText("SORT BY :");
        jLabel3.setName(""); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(280, 70, 70, 20);

        btnSearch.setText("SEARCH");
        btnSearch.setName("btnSearch"); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch);
        btnSearch.setBounds(170, 70, 90, 50);

        jLabel4.setText("CATEGORY :");
        jLabel4.setName(""); // NOI18N
        getContentPane().add(jLabel4);
        jLabel4.setBounds(280, 100, 80, 20);

        tblRequestDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Code", "Category", "Description", "Quantity"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        tblRequestDetails.setName("tblStocks"); // NOI18N
        jScrollPane3.setViewportView(tblRequestDetails);
        if (tblRequestDetails.getColumnModel().getColumnCount() > 0)
        {
            tblRequestDetails.getColumnModel().getColumn(0).setMinWidth(100);
            tblRequestDetails.getColumnModel().getColumn(0).setMaxWidth(100);
            tblRequestDetails.getColumnModel().getColumn(1).setMinWidth(150);
            tblRequestDetails.getColumnModel().getColumn(1).setMaxWidth(150);
            tblRequestDetails.getColumnModel().getColumn(3).setMinWidth(100);
            tblRequestDetails.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(20, 270, 600, 130);

        tblStationery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Code", "Category", "Description", "Stock"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        tblStationery.setName("tblStationery"); // NOI18N
        jScrollPane2.setViewportView(tblStationery);
        if (tblStationery.getColumnModel().getColumnCount() > 0)
        {
            tblStationery.getColumnModel().getColumn(0).setMinWidth(100);
            tblStationery.getColumnModel().getColumn(0).setMaxWidth(100);
            tblStationery.getColumnModel().getColumn(1).setMinWidth(150);
            tblStationery.getColumnModel().getColumn(1).setMaxWidth(150);
            tblStationery.getColumnModel().getColumn(3).setMinWidth(100);
            tblStationery.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(20, 130, 600, 130);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 650, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBackActionPerformed
    {//GEN-HEADEREND:event_btnBackActionPerformed
        StaffMain frame = new StaffMain();
        frame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRemoveItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRemoveItemActionPerformed
    {//GEN-HEADEREND:event_btnRemoveItemActionPerformed
        if (tblRequestDetails.getSelectedRow() >= 0)
        {
            int rowIndex = tblRequestDetails.getSelectedRow();
            int code = selectedStationeries.get(rowIndex).getStationeryCode();

            for (int i = 0; i < stationeries.size(); i++)
            {
                if (stationeries.get(i).getStationeryCode() == code)
                {
                    try
                    {
                        stationeries.get(i).UpdateStationeryStock(stationeries.get(i).getStock() + selectedStationeries.get(rowIndex).getQuantity());
                    } catch (SQLException ex)
                    {
                        Logger.getLogger(RequestStationery.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex)
                    {
                        Logger.getLogger(RequestStationery.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            String description = txtSearchDescription.getText();
            int categoryID = cmbSearchCategory.getSelectedIndex();

            try
            {
                SetTableValues(description, categoryID);
            } catch (SQLException ex)
            {
                Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex)
            {
                Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
            }

            selectedStationeries.remove(rowIndex);

            DefaultTableModel model = (DefaultTableModel) tblRequestDetails.getModel();
            model.setRowCount(0);

            Object[] rowData = new Object[6];

            for (int i = 0; i < selectedStationeries.size(); i++)
            {
                rowData[0] = selectedStationeries.get(i).getStationeryCode();
                rowData[1] = selectedStationeries.get(i).getCategory();
                rowData[2] = selectedStationeries.get(i).getDescription();
                rowData[3] = selectedStationeries.get(i).getQuantity();

                model.addRow(rowData);
            }
        } else
        {
            JOptionPane.showMessageDialog(null, "Select an item to remove!");
        }
    }//GEN-LAST:event_btnRemoveItemActionPerformed

    private void btnClearItemsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnClearItemsActionPerformed
    {//GEN-HEADEREND:event_btnClearItemsActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblRequestDetails.getModel();

        if (model.getRowCount() > 0)
        {
            for (int i = 0; i < stationeries.size(); i++)
            {
                for (int j = 0; j < selectedStationeries.size(); j++)
                {
                    if (stationeries.get(i).getStationeryCode() == selectedStationeries.get(j).getStationeryCode())
                    {
                        try
                        {
                            selectedStationeries.get(j).UpdateStationeryStock(stationeries.get(i).getStock() + selectedStationeries.get(j).getQuantity());
                        } catch (SQLException ex)
                        {
                            Logger.getLogger(RequestStationery.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ClassNotFoundException ex)
                        {
                            Logger.getLogger(RequestStationery.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }

            selectedStationeries.clear();

            model.setRowCount(0);

            String description = txtSearchDescription.getText();
            int categoryID = cmbSearchCategory.getSelectedIndex();

            try
            {
                SetTableValues(description, categoryID);
            } catch (SQLException ex)
            {
                Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex)
            {
                Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else
        {
            JOptionPane.showMessageDialog(null, "There are no items to clear!");
        }
    }//GEN-LAST:event_btnClearItemsActionPerformed

    private void btnRequestItemsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRequestItemsActionPerformed
    {//GEN-HEADEREND:event_btnRequestItemsActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblRequestDetails.getModel();

        if (model.getRowCount() > 0)
        {
            List<RequestDetail> requestDetails = new ArrayList<>();

            for (Stationery stationery : selectedStationeries)
            {
                requestDetails.add(new RequestDetail(stationery.getStationeryCode(), stationery.getQuantity()));
            }

            Request request = new Request(Staff.loggedInStaffID, requestDetails);

            try
            {
                request.AddRequest();

                JOptionPane.showMessageDialog(null, "Request submitted successfully!");

                StaffMain frame = new StaffMain();
                frame.setVisible(true);
                this.setVisible(false);
            } catch (SQLException ex)
            {
                Logger.getLogger(RequestStationery.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex)
            {
                Logger.getLogger(RequestStationery.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else
        {
            JOptionPane.showMessageDialog(null, "Select items to request!");
        }
    }//GEN-LAST:event_btnRequestItemsActionPerformed

    List<Stationery> selectedStationeries;

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddItemActionPerformed
    {//GEN-HEADEREND:event_btnAddItemActionPerformed
        if (tblStationery.getSelectedRow() >= 0)
        {
            boolean itemAlreadyAdded = false;

            int rowIndex = tblStationery.getSelectedRow();

            for (Stationery stationery : selectedStationeries)
            {
                if (stationery.getStationeryCode() == (int) tblStationery.getValueAt(rowIndex, 0))
                {
                    itemAlreadyAdded = true;
                    break;
                }
            }

            if (!itemAlreadyAdded)
            {
                boolean validQuantity = false;

                int quantity = 0;
                String input = "";

                do
                {
                    try
                    {
                        input = JOptionPane.showInputDialog(null, "Enter quantity : ");

                        if (input == null || (input.equals("")))
                        {
                            throw new CustomException("Operation cancelled...");
                        }

                        quantity = Integer.parseInt(input);

                        validQuantity = true;
                    } catch (CustomException e)
                    {
                        validQuantity = true;
                    } catch (NumberFormatException e)
                    {
                        JOptionPane.showMessageDialog(null, "Enter a numeric value!");
                    }
                } while (!validQuantity);

                if (input != null && (!input.equals("")))
                {
                    int oldQuantity = (int) tblStationery.getValueAt(rowIndex, 3);
                    int newQuantity = oldQuantity - quantity;

                    int answer = 0;

                    if (newQuantity < 0)
                    {
                        answer = JOptionPane.showConfirmDialog(null, "Ordering more than what is available may result the request to be delayed!");
                    }

                    if (newQuantity >= 0 || answer == JOptionPane.YES_OPTION)
                    {
                        Stationery tempStationery = new Stationery();

                        for (int i = 0; i < stationeries.size(); i++)
                        {
                            if (stationeries.get(i).getStationeryCode() == (int) tblStationery.getValueAt(rowIndex, 0))
                            {
                                tempStationery = stationeries.get(i);

                                try
                                {
                                    stationeries.get(i).UpdateStationeryStock(newQuantity);
                                } catch (SQLException ex)
                                {
                                    Logger.getLogger(RequestStationery.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (ClassNotFoundException ex)
                                {
                                    Logger.getLogger(RequestStationery.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }

                        tempStationery.setQuantity(quantity);

                        selectedStationeries.add(tempStationery);

                        DefaultTableModel model = (DefaultTableModel) tblRequestDetails.getModel();
                        model.setRowCount(0);

                        Object[] rowData = new Object[6];

                        for (int i = 0; i < selectedStationeries.size(); i++)
                        {
                            rowData[0] = selectedStationeries.get(i).getStationeryCode();
                            rowData[1] = selectedStationeries.get(i).getCategory();
                            rowData[2] = selectedStationeries.get(i).getDescription();
                            rowData[3] = selectedStationeries.get(i).getQuantity();

                            model.addRow(rowData);
                        }
                    }
                }
            } else
            {
                JOptionPane.showMessageDialog(null, "Selected item has already been added!");
            }
        } else
        {
            JOptionPane.showMessageDialog(null, "Select an item to add to the list!");
        }

        txtSearchDescription.setText("");
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void cmbSortActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbSortActionPerformed
    {//GEN-HEADEREND:event_cmbSortActionPerformed
        String description = txtSearchDescription.getText();
        int categoryID = cmbSearchCategory.getSelectedIndex();

        try
        {
            SetTableValues(description, categoryID);
        } catch (SQLException ex)
        {
            Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbSortActionPerformed

    private void cmbSearchCategoryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbSearchCategoryActionPerformed
    {//GEN-HEADEREND:event_cmbSearchCategoryActionPerformed
        String description = txtSearchDescription.getText();
        int categoryID = cmbSearchCategory.getSelectedIndex();

        try
        {
            SetTableValues(description, categoryID);
        } catch (SQLException ex)
        {
            Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbSearchCategoryActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowActivated
    {//GEN-HEADEREND:event_formWindowActivated
        cmbSort.removeAllItems();
        cmbSearchCategory.removeAllItems();

        cmbSort.addItem("Code");
        cmbSort.addItem("Stock");
        cmbSort.addItem("Description");

        try
        {
            List<Category> categories = Category.GetCategories();

            cmbSearchCategory.addItem("ALL");

            for (Category category : categories)
            {
                cmbSearchCategory.addItem(category.getDescription());
            }

            SetTableValues("", 0);
        } catch (SQLException ex)
        {
            Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowActivated

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSearchActionPerformed
    {//GEN-HEADEREND:event_btnSearchActionPerformed
        String description = txtSearchDescription.getText();
        int categoryID = cmbSearchCategory.getSelectedIndex();

        try
        {
            SetTableValues(description, categoryID);
            
            if (tblStationery.getRowCount() == 0)
            {
                JOptionPane.showMessageDialog(null, "No items found!");
                
                txtSearchDescription.setText("");
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(ManageStocks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    List<Stationery> stationeries;

    private void SetTableValues(String description, int categoryID) throws SQLException, ClassNotFoundException
    {
        DefaultTableModel model = (DefaultTableModel) tblStationery.getModel();
        model.setRowCount(0);

        stationeries = Stationery.GetStationery(description, categoryID);

        switch (cmbSort.getSelectedIndex())
        {
            case 0:
                Collections.sort(stationeries, new StationeryCodeSort());
                break;
            case 1:
                Collections.sort(stationeries, new StationeryStockSort());
                break;
            case 2:
                Collections.sort(stationeries, new StationeryDescriptionSort());
                break;
            default:
                break;
        }

        Object[] rowData = new Object[6];

        for (int i = 0; i < stationeries.size(); i++)
        {
            rowData[0] = stationeries.get(i).getStationeryCode();
            rowData[1] = stationeries.get(i).getCategory();
            rowData[2] = stationeries.get(i).getDescription();
            rowData[3] = stationeries.get(i).getStock();

            model.addRow(rowData);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(RequestStationery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(RequestStationery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(RequestStationery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(RequestStationery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new RequestStationery().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClearItems;
    private javax.swing.JButton btnRemoveItem;
    private javax.swing.JButton btnRequestItems;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbSearchCategory;
    private javax.swing.JComboBox<String> cmbSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblRequestDetails;
    private javax.swing.JTable tblStationery;
    private javax.swing.JTextField txtSearchDescription;
    // End of variables declaration//GEN-END:variables
}
