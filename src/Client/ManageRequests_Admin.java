/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import BusinessLogic.IRequest;
import BusinessLogic.IStationery;
import BusinessLogic.Request;
import BusinessLogic.RequestDetail;
import BusinessLogic.RequestType;
import Server.ImpStationery;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nicky
 */
public class ManageRequests_Admin extends javax.swing.JFrame
{

    /**
     * Creates new form OrderStocks
     */
    public ManageRequests_Admin() throws RemoteException, NotBoundException
    {
        initComponents();
        this.setLocationRelativeTo(null);

        requests = new ArrayList<>();
        requestDetails = new ArrayList<>();

        Registry r = LocateRegistry.getRegistry("localhost", 420);
        ir = (IRequest) r.lookup("Request");
        is = (IStationery) r.lookup("Stationery");
    }

    IRequest ir;
    IStationery is;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        cmbSort = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRequests = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequestDetails = new javax.swing.JTable();
        btnRejectRequest = new javax.swing.JButton();
        btnAcceptRequest = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(650, 500));
        setSize(new java.awt.Dimension(650, 500));
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowActivated(java.awt.event.WindowEvent evt)
            {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(null);

        cmbSort.setName("cmbStationery"); // NOI18N
        cmbSort.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbSortActionPerformed(evt);
            }
        });
        getContentPane().add(cmbSort);
        cmbSort.setBounds(230, 80, 260, 20);

        jLabel3.setText("VIEW :");
        jLabel3.setName(""); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(180, 80, 50, 20);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel10.setText("MANAGE REQUESTS");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(240, 20, 270, 29);

        btnBack.setText("BACK");
        btnBack.setName("btnBack"); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack);
        btnBack.setBounds(530, 20, 90, 30);

        tblRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "RequestID", "AdminID", "RequestDate", "ReceiveDate", "Accepted"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblRequests.setName("tblStationery"); // NOI18N
        tblRequests.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblRequests.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tblRequestsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblRequests);
        if (tblRequests.getColumnModel().getColumnCount() > 0)
        {
            tblRequests.getColumnModel().getColumn(4).setResizable(false);
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(20, 110, 600, 140);

        tblRequestDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "RequestID", "Code", "Category", "Description", "Quantity", "Stock"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblRequestDetails.setName("tblRequestDetails"); // NOI18N
        tblRequestDetails.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblRequestDetails);
        if (tblRequestDetails.getColumnModel().getColumnCount() > 0)
        {
            tblRequestDetails.getColumnModel().getColumn(0).setMinWidth(80);
            tblRequestDetails.getColumnModel().getColumn(0).setMaxWidth(80);
            tblRequestDetails.getColumnModel().getColumn(3).setMinWidth(150);
            tblRequestDetails.getColumnModel().getColumn(3).setMaxWidth(150);
            tblRequestDetails.getColumnModel().getColumn(4).setMinWidth(80);
            tblRequestDetails.getColumnModel().getColumn(4).setMaxWidth(80);
            tblRequestDetails.getColumnModel().getColumn(5).setMinWidth(80);
            tblRequestDetails.getColumnModel().getColumn(5).setMaxWidth(80);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 260, 600, 140);

        btnRejectRequest.setText("REJECT REQUEST");
        btnRejectRequest.setActionCommand("REMOVE ITEM");
        btnRejectRequest.setName("btnRejectRequest"); // NOI18N
        btnRejectRequest.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnRejectRequestActionPerformed(evt);
            }
        });
        getContentPane().add(btnRejectRequest);
        btnRejectRequest.setBounds(20, 410, 180, 35);

        btnAcceptRequest.setActionCommand("REMOVE ITEM");
        btnAcceptRequest.setLabel("ACCEPT REQUEST");
        btnAcceptRequest.setName("btnAcceptRequest"); // NOI18N
        btnAcceptRequest.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAcceptRequestActionPerformed(evt);
            }
        });
        getContentPane().add(btnAcceptRequest);
        btnAcceptRequest.setBounds(440, 410, 180, 35);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 650, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    RequestType rt = RequestType.All;

    private void cmbSortActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbSortActionPerformed
    {//GEN-HEADEREND:event_cmbSortActionPerformed
        ClearRequestDetailsTable();

        switch (cmbSort.getSelectedIndex())
        {
            case 0:
                rt = RequestType.All;
                break;
            case 1:
                rt = RequestType.Completed;
                break;
            case 2:
                rt = RequestType.Uncompleted;
                break;
        }

        try
        {
            SetRequestsTableValues();
        } catch (SQLException ex)
        {
            Logger.getLogger(ManageRequests_Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(ManageRequests_Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex)
        {
            Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbSortActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBackActionPerformed
    {//GEN-HEADEREND:event_btnBackActionPerformed
        try
        {
            AdminMain frame = new AdminMain();
            frame.setVisible(true);
            this.setVisible(false);
        } catch (RemoteException ex)
        {
            Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex)
        {
            Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRejectRequestActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRejectRequestActionPerformed
    {//GEN-HEADEREND:event_btnRejectRequestActionPerformed
        try
        {
            String message = JOptionPane.showInputDialog("Reason For Cancellation?");

            ir.RejectRequest(Integer.parseInt(tblRequests.getValueAt(rowIndex, 0).toString()), message);

            Request request = new Request();
            List<RequestDetail> newRequestDetails = new ArrayList<>();

            for (int i = 0; i < requests.size(); i++)
            {
                if (requests.get(i).getRequestID() == (Integer.parseInt(tblRequests.getValueAt(rowIndex, 0).toString())))
                {
                    request = requests.get(i);

                    for (int j = 0; j < request.getRequestDetails().size(); j++)
                    {
                        if (request.getRequestDetails().get(j).getId() == (Integer.parseInt(tblRequests.getValueAt(rowIndex, 0).toString())))
                        {
                            newRequestDetails.add(request.getRequestDetails().get(j));
                        }
                    }
                    break;
                }
            }

            request.setRequestDetails(newRequestDetails);

            ir.RefillCancelledRequestQuantities(request);

        } catch (SQLException ex)
        {
            Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex)
        {
            Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRejectRequestActionPerformed

    int rowIndex = 0;

    private void tblRequestsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblRequestsMouseClicked
    {//GEN-HEADEREND:event_tblRequestsMouseClicked
        if (tblRequests.getSelectedRow() >= 0)
        {
            try
            {
                SetRequestDetailsTableValues();

                rowIndex = tblRequests.getSelectedRow();

                if (tblRequests.getValueAt(rowIndex, 4).toString().equals("true"))
                {
                    btnAcceptRequest.setEnabled(false);
                    btnRejectRequest.setEnabled(false);
                }
                if (tblRequests.getValueAt(rowIndex, 4).toString().equals("false"))
                {
                    btnAcceptRequest.setEnabled(true);
                    btnRejectRequest.setEnabled(true);
                }
                if ((tblRequests.getValueAt(rowIndex, 4).toString().equals("false")) && (!(tblRequests.getValueAt(rowIndex, 1).toString().isEmpty())))
                {
                    btnAcceptRequest.setEnabled(false);
                    btnRejectRequest.setEnabled(false);
                }
            } catch (SQLException ex)
            {
                Logger.getLogger(ManageRequests_Staff.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex)
            {
                Logger.getLogger(ManageRequests_Staff.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex)
            {
                Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tblRequestsMouseClicked

    List<Request> requests;

    private void SetRequestsTableValues() throws SQLException, ClassNotFoundException, RemoteException
    {
        btnAcceptRequest.setEnabled(true);
        btnRejectRequest.setEnabled(true);

        requests = ir.GetRequests(rt);

        DefaultTableModel model = (DefaultTableModel) tblRequests.getModel();
        model.setRowCount(0);

        Object[] rowData = new Object[5];

        for (int i = 0; i < requests.size(); i++)
        {
            rowData[0] = requests.get(i).getRequestID();
            rowData[1] = requests.get(i).getAdminID();
            rowData[2] = requests.get(i).getRequestDate();
            rowData[3] = requests.get(i).getReceiveDate();
            rowData[4] = requests.get(i).isRequestAccepted();

            model.addRow(rowData);
        }
    }

    List<RequestDetail> requestDetails;

    private void SetRequestDetailsTableValues() throws SQLException, ClassNotFoundException, RemoteException
    {
        requestDetails.clear();

        int rowIndex = tblRequests.getSelectedRow();
        int requestID = requests.get(rowIndex).getRequestID();

        for (RequestDetail requestDetail : requests.get(rowIndex).getRequestDetails())
        {
            if (requestDetail.getId() == requestID)
            {
                requestDetails.add(requestDetail);
            }
        }

        DefaultTableModel model = (DefaultTableModel) tblRequestDetails.getModel();
        model.setRowCount(0);

        Object[] rowData = new Object[6];

        for (int i = 0; i < requestDetails.size(); i++)
        {
            rowData[0] = requestDetails.get(i).getId();
            rowData[1] = requestDetails.get(i).getStationeryCode();
            rowData[2] = requestDetails.get(i).getCategory();
            rowData[3] = requestDetails.get(i).getDescription();
            rowData[4] = requestDetails.get(i).getQuantity();            
            rowData[5] = is.GetStockOfStationery(requestDetails.get(i).getStationeryCode());

            model.addRow(rowData);
        }
    }

    private void btnAcceptRequestActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAcceptRequestActionPerformed
    {//GEN-HEADEREND:event_btnAcceptRequestActionPerformed
        try
        {
            String message = JOptionPane.showInputDialog("Feedback Regarding Accepting?");
            int days = Integer.parseInt(JOptionPane.showInputDialog("How Many Days Will The Order Take?"));

            ir.AcceptRequest(Integer.parseInt(tblRequests.getValueAt(rowIndex, 0).toString()), message, days);
        } catch (SQLException ex)
        {
            Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex)
        {
            Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAcceptRequestActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowActivated
    {//GEN-HEADEREND:event_formWindowActivated
        cmbSort.removeAllItems();

        cmbSort.addItem("ALL REQUESTS");
        cmbSort.addItem("COMPLETED REQUESTS");
        cmbSort.addItem("UNCOMPLETED REQUESTS");

        cmbSort.setSelectedIndex(0);

        try
        {
            SetRequestsTableValues();
        } catch (SQLException ex)
        {
            Logger.getLogger(ManageRequests_Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(ManageRequests_Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex)
        {
            Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowActivated

    private void ClearRequestDetailsTable()
    {
        DefaultTableModel model = (DefaultTableModel) tblRequestDetails.getModel();
        model.setRowCount(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ManageRequests_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ManageRequests_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ManageRequests_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ManageRequests_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                try
                {
                    new ManageRequests_Admin().setVisible(true);
                } catch (RemoteException ex)
                {
                    Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NotBoundException ex)
                {
                    Logger.getLogger(ManageRequests_Admin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptRequest;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRejectRequest;
    private javax.swing.JComboBox<String> cmbSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblRequestDetails;
    private javax.swing.JTable tblRequests;
    // End of variables declaration//GEN-END:variables
}
